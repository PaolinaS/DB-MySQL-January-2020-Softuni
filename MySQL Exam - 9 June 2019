#01. Table Design

CREATE TABLE branches(
id INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(30) UNIQUE NOT NULL
);

CREATE TABLE employees(
id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(20) NOT NULL,
last_name VARCHAR(20) NOT NULL,
salary DECIMAL(10,2) NOT NULL,
started_on DATE NOT NULL,
branch_id INT not null,

CONSTRAINT fk_employees_branches
FOREIGN KEY (branch_id)
REFERENCES branches(id)
);

CREATE TABLE clients(
id INT PRIMARY KEY AUTO_INCREMENT,
full_name VARCHAR(50) NOT NULL,
age INT NOT NULL
);

CREATE TABLE employees_clients(
employee_id INT,
client_id INT,


CONSTRAINT fk_employees_clients_employees
FOREIGN KEY (employee_id)
REFERENCES employees(id),

CONSTRAINT fk_employees_clients_clients
FOREIGN KEY (client_id)
REFERENCES clients(id)
);

CREATE TABLE bank_accounts(
id INT PRIMARY KEY AUTO_INCREMENT,
account_number VARCHAR(10) NOT NULL,
balance DECIMAL(10,2) NOT NULL,
client_id INT UNIQUE NOT NULL,

CONSTRAINT fk_bank_accounts_clients
FOREIGN KEY (client_id)
REFERENCES clients(id)
);

CREATE TABLE cards(
id INT PRIMARY KEY AUTO_INCREMENT,
card_number VARCHAR(19) NOT NULL,
card_status VARCHAR(7) NOT NULL,
bank_account_id INT not null,

CONSTRAINT fk_cards_bank_accounts
FOREIGN KEY (bank_account_id)
REFERENCES bank_accounts(id)
);



#02. Insert
/* You will have to insert records of data into the cards table, based on the clients table. 
For clients with id between 191 and 200 (inclusive), insert data in the cards table with the following values:
    • card_number – set it to full name of the client, but reversed!
    • card_status – set it to "Active".
    • bank_account_id –set it to client's id value. */

INSERT INTO cards (card_number, card_status, bank_account_id)
SELECT 
    REVERSE(c.full_name) AS card_number,
    'Active' AS card_status,
    c.id AS bank_account_id
FROM clients AS c
WHERE c.id BETWEEN 191 AND 200


#03. Update
/* Update all clients which have the same id as the employee they are appointed to. 
Set their employee_id with the employee with the lowest count of clients.
If there are 2 such employees with equal count of clients, take the one with the lowest id. */

UPDATE employees_clients
SET employee_id = 
(SELECT employee_id from (select * from employees_clients) as ec
join clients as c on c.id = ec.client_id 
group by employee_id 
order by count(employee_id) ,id
limit 1)
where employee_id = client_id;

#04.Delete
/*Delete all employees which do not have any clients. */

DELETE e 
FROM employees AS e
LEFT JOIN employees_clients AS ec
ON ec.employee_id = e.id
WHERE ec.client_id IS NULL

#05. Clients

SELECT id, full_name
FROM clients
ORDER BY id

#6
SELECT id, concat(first_name, ' ', last_name), concat('$',salary),
started_on
FROM employees
WHERE salary >= 10000 AND started_on >= '2018-01-01'
ORDER BY salary DESC, id ASC

#7
SELECT c.id, concat(c.card_number,' : ', cl.full_name) AS card_token
FROM cards AS c
JOIN bank_accounts AS ba
ON c.bank_account_id = ba.id
JOIN clients AS cl
ON ba.client_id = cl.id
ORDER BY c.id DESC


#10. Extract card's count
/*Create a user defined function with the name udf_client_cards_count(name VARCHAR(30))
that receives a client's full name and returns the number of cards he has. */
CREATE FUNCTION udf_client_cards_count(p_name VARCHAR(30))
RETURNS VARCHAR(40)
BEGIN
RETURN (SELECT count(c.id)
FROM cards AS c
LEFT JOIN bank_accounts AS ba
ON ba.id = c.bank_account_id
LEFT JOIN clients AS cl
ON cl.id  = ba.client_id
WHERE cl.full_name = p_name
);
end
#11. Client Info
/* Create a stored procedure udp_clientinfo which accepts the following parameters:
    • full_name
And extracts data about the client with the given full name.
Aside from the full_name, the procedure should extract the client's age, bank account number and balance.
The account’s salary should have "$" prefix. */


CREATE PROCEDURE udp_clientinfo  (f_name VARCHAR(50))
BEGIN
SELECT cl.full_name, cl.age, ba.account_number, concat('$',ba.balance )
FROM clients AS cl
JOIN bank_accounts AS ba
ON ba.client_id = cl.id
WHERE cl.full_name = f_name;
END
