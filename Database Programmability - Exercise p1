#01. Employees with Salary Above 35000

CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
	SELECT first_name, last_name
	FROM employees
	WHERE salary > 35000
	ORDER BY first_name, last_name, employee_id;

END;

#02. Employees with Salary Above Number

CREATE PROCEDURE usp_get_employees_salary_above(min_salary DECIMAL(19, 4))
BEGIN

SELECT first_name, last_name
FROM employees
WHERE salary >= min_salary
ORDER BY first_name, last_name, employee_id;

END;

#03. Town Names Starting With

CREATE PROCEDURE usp_get_towns_starting_with(input VARCHAR(50))
BEGIN

SELECT `name`
FROM towns
WHERE `name` LIKE concat(input, '%')
ORDER BY `name`;

END;

#04. Employees from Town

CREATE PROCEDURE usp_get_employees_from_town(town_name VARCHAR(50))
BEGIN

SELECT e.first_name, e.last_name 
FROM employees AS e
JOIN addresses AS a
ON a.address_id = e.address_id
JOIN towns AS t
ON a.town_id = t.town_id
WHERE t.`name` =  town_name
ORDER BY first_name, last_name, employee_id;

END;

#05. Salary Level Function

CREATE FUNCTION ufn_get_salary_level(salary_emp DECIMAL)
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
	DECLARE result VARCHAR(10);
    
    IF salary_emp < 30000 THEN SET result := 'Low';
    ELSEIF salary_emp BETWEEN 30000 AND 50000 THEN SET result := 'Average';
    ELSE SET result := 'High';
    END IF;
    
	RETURN result;
END;

#06. Employees by Salary Level

CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(10))
BEGIN
	SELECT first_name, last_name
	FROM employees
	WHERE LOWER(ufn_get_salary_level(salary)) = salary_level
	ORDER BY first_name DESC , last_name DESC;

END;

#07. Define Function

CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))
RETURNS BIT
DETERMINISTIC
BEGIN
RETURN word REGEXP CONCAT('^[',set_of_letters,']+$');
END;

#08. Find Full Name

CREATE PROCEDURE usp_get_holders_full_name;
BEGIN
	SELECT concat(first_name,' ', last_name) AS full_name
	FROM account_holders
	ORDER BY full_name, id
END

#9. People with Balance Higher Than

CREATE PROCEDURE usp_get_holders_with_balance_higher_than(salary_level DECIMAL(19, 4))
BEGIN
	SELECT ah.first_name, ah.last_name
	FROM account_holders AS ah
	JOIN accounts AS a
	ON a.account_holder_id = ah.id
	GROUP BY ah.account_holder_id
	HAVING SUM(balance) > salary_level
	ORDER BY a.id;

END;

#12. Deposit Money

CREATE PROCEDURE usp_deposit_money(account_id INT, money_amount DECIMAL(19, 4))
BEGIN
	START TRANSACTION;
    IF(money_amount <= 0) 
		THEN ROLLBACK;
	ELSE 
		UPDATE accounts
        SET balance = balance + money_amount
        WHERE id = account_id;
        END IF;

END;






